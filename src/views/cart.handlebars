<!DOCTYPE html>
<html>
<head>
    <title>Carrito de Compras</title>
    <style>
        .cart-empty {
            text-align: center;
            padding: 3rem;
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .cart-empty i {
            font-size: 4rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .cart-item {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .cart-item:hover {
            transform: translateY(-2px);
        }

        .cart-item img {
            width: 120px;
            height: 120px;
            object-fit: contain;
            background: var(--light-bg);
            padding: 0.5rem;
            border-radius: 12px;
            transition: transform 0.3s ease;
        }

        .cart-item:hover img {
            transform: scale(1.05);
        }

        .quantity-control {
            width: 120px;
            background: var(--light-bg);
            border-radius: 25px;
            padding: 0.25rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-right: 1rem;
        }

        .quantity-control .btn {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            background: white;
            color: var(--primary-color);
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .quantity-control .btn:hover:not(:disabled) {
            background: var(--primary-color);
            color: white;
            transform: translateY(-1px);
        }

        .quantity-control .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .quantity-control input {
            width: 40px;
            border: none;
            background: transparent;
            text-align: center;
            font-weight: 600;
            color: var(--dark-text);
            font-size: 0.9rem;
            padding: 0;
            -moz-appearance: textfield;
        }

        .quantity-control input::-webkit-outer-spin-button,
        .quantity-control input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .cart-item-details {
            flex: 1;
        }

        .cart-item-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark-text);
        }

        .cart-item-description {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .price-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .original-price {
            text-decoration: line-through;
            color: #999;
            font-size: 0.9rem;
        }

        .final-price {
            font-size: 1.4rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .remove-btn {
            background: none;
            border: none;
            color: var(--warning-color);
            font-size: 1.2rem;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .remove-btn:hover {
            background: var(--warning-color);
            color: white;
            transform: rotate(90deg);
        }

        .cart-total {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            position: sticky;
            top: 1rem;
        }

        .cart-total .total-amount {
            font-size: 2rem;
            color: var(--primary-color);
            font-weight: bold;
        }

        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .toast {
            background: white;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            animation: slideIn 0.3s ease;
        }

        .toast.success {
            border-left: 4px solid var(--success-color);
        }

        .toast.error {
            border-left: 4px solid var(--warning-color);
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .loading {
            position: relative;
            pointer-events: none;
        }

        .loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: inherit;
        }

        .cart-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .cart-item-content {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        @media (max-width: 768px) {
            .cart-actions {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1 class="mb-4">Carrito de Compras</h1>
        
        <div class="toast-container"></div>

        {{#if cart.products.length}}
            <div class="row">
                <div class="col-md-8">
                    {{#each cart.products}}
                    <div class="cart-item" data-product-id="{{this.product._id}}">
                        <div class="d-flex align-items-center gap-4">
                            <img src="{{this.product.thumbnails.[0]}}" alt="{{this.product.title}}">
                            <div class="cart-item-content flex-grow-1">
                                <div>
                                    <h5 class="cart-item-title">{{this.product.title}}</h5>
                                    <p class="cart-item-description">{{this.product.description}}</p>
                                </div>
                                <div class="cart-actions">
                                    <div class="quantity-control">
                                        <input type="number" class="quantity-input" value="{{this.quantity}}" min="1" max="{{this.product.stock}}" data-product-id="{{this.product._id}}">
                                    </div>
                                    <div class="price-container">
                                        {{#if this.product.onSale}}
                                            <div class="original-price">${{multiply this.product.price this.quantity}}</div>
                                            <div class="final-price">${{multiply this.product.finalPrice this.quantity}}</div>
                                        {{else}}
                                            <div class="final-price">${{multiply this.product.price this.quantity}}</div>
                                        {{/if}}
                                    </div>
                                    <button class="remove-btn remove-product" data-product-id="{{this.product._id}}">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
                
                <div class="col-md-4">
                    <div class="cart-total">
                        <h4>Resumen del Carrito</h4>
                        <hr>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span>${{cartTotal cart.products}}</span>
                        </div>
                        <div class="d-flex justify-content-between mb-3">
                            <span>Env√≠o:</span>
                            <span class="text-success">Gratis</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-4">
                            <span>Total:</span>
                            <span class="total-amount">${{cartTotal cart.products}}</span>
                        </div>
                        <button class="btn btn-primary w-100 mb-2">
                            <i class="bi bi-credit-card me-2"></i>Proceder al Pago
                        </button>
                        <button class="btn btn-outline-danger w-100" onclick="clearCart()">
                            <i class="bi bi-trash me-2"></i>Vaciar Carrito
                        </button>
                    </div>
                </div>
            </div>
        {{else}}
            <div class="cart-empty">
                <i class="bi bi-cart-x"></i>
                <h3>Tu carrito est√° vac√≠o</h3>
                <p class="text-muted">¬øPor qu√© no agregas algunos productos?</p>
                <a href="/products" class="btn btn-primary">
                    <i class="bi bi-shop me-2"></i>Ver Productos
                </a>
            </div>
        {{/if}}
    </div>

    <script>
        const cartId = '{{cart._id}}';

        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                ${message}
            `;
            document.querySelector('.toast-container').appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        async function updateQuantity(productId, quantity, input) {
            const cartItem = input.closest('.cart-item');
            try {
                if (quantity < 1) {
                    showToast('La cantidad m√≠nima es 1', 'error');
                    input.value = 1;
                    return;
                }
                
                if (quantity > parseInt(input.max)) {
                    showToast('No hay suficiente stock disponible', 'error');
                    input.value = input.max;
                    return;
                }

                cartItem.classList.add('loading');
                
                const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ quantity: parseInt(quantity) })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Error al actualizar cantidad');
                }

                const result = await response.json();
                
                // Actualizar precios
                const priceContainer = cartItem.querySelector('.price-container');
                const product = result.payload.products.find(p => p.product._id === productId);
                if (product) {
                    if (product.product.onSale) {
                        priceContainer.innerHTML = `
                            <div class="original-price">$${(product.product.price * quantity).toFixed(2)}</div>
                            <div class="final-price">$${(product.product.finalPrice * quantity).toFixed(2)}</div>
                        `;
                    } else {
                        priceContainer.innerHTML = `
                            <div class="final-price">$${(product.product.price * quantity).toFixed(2)}</div>
                        `;
                    }
                }

                // Actualizar el total del carrito
                const cartTotalElement = document.querySelector('.total-amount');
                const subtotalElement = document.querySelector('.cart-total .d-flex:first-child span:last-child');
                const total = result.payload.products.reduce((sum, item) => {
                    const price = item.product.onSale ? item.product.finalPrice : item.product.price;
                    return sum + (price * item.quantity);
                }, 0);
                
                cartTotalElement.textContent = `$${total.toFixed(2)}`;
                subtotalElement.textContent = `$${total.toFixed(2)}`;

                showToast('Cantidad actualizada correctamente');
            } catch (error) {
                showToast(error.message, 'error');
                input.value = input.defaultValue;
            } finally {
                cartItem.classList.remove('loading');
            }
        }

        // Eventos de cantidad
        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('change', async (e) => {
                const input = e.currentTarget;
                const productId = input.dataset.productId;
                const quantity = parseInt(input.value);
                await updateQuantity(productId, quantity, input);
            });
        });

        // Eliminar producto
        async function removeProduct(productId) {
            try {
                const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) throw new Error('Error al eliminar producto');
                location.reload();
            } catch (error) {
                alert('Error al eliminar el producto');
                console.error(error);
            }
        }

        document.querySelectorAll('.remove-product').forEach(button => {
            button.addEventListener('click', e => {
                const productId = e.target.closest('.remove-product').dataset.productId;
                if (confirm('¬øEst√°s seguro de que quieres eliminar este producto?')) {
                    removeProduct(productId);
                }
            });
        });
    </script>
</body>
</html> 